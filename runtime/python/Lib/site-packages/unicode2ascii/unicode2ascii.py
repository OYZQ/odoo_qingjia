#!/usr/bin/env python
# -*- encoding: utf-8 -*-
###############################################################################
#
#   unicode2ascii lib
#   Copyright (C) 2012-TODAY Akretion <http://www.akretion.com>. All Rights Reserved
#   @author Sébastien BEAU <sebastien.beau@akretion.com>
#           Alexis De Lattre <alexis.delattre@akretion.com>
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as
#   published by the Free Software Foundation, either version 3 of the
#   License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################


import unicodedata
CHAR_MAP={
    u'Æ': u'AE',
    u'Ð': u'D',
    u'Ø': u'O',
    u'Þ': u'TH',
    u'ß': u'ss',
    u'æ': u'ae',
    u'ð': u'd',
    u'ø': u'o',
    u'þ': u'th',
    u'Œ': u'OE',
    u'œ': u'oe',
    u'ƒ': u'f',
}


def Unicode2Ascii(my_unicode):
    '''Convert to ascii, with clever management of accents (é -> e, è -> e)'''
    if isinstance(my_unicode, unicode):
        result = ""
        for char in unicodedata.normalize('NFD', my_unicode):
            if unicodedata.category(char) != 'Mn':
                if CHAR_MAP.get(char):
                    result += CHAR_MAP[char]
                else:
                    result += char
        return result
    # If the argument is already of string type, we return it with the same value
    elif isinstance(my_unicode, str):
        return my_unicode
    else:
        return False


if __name__ == '__main__':
    my_ugly_unicode = u"ÆÐØÞßæðøþŒœƒ"
    my_beautiful_ascii = Unicode2Ascii(my_ugly_unicode)
    
    print "the result is", my_beautiful_ascii
